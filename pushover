#! /bin/sh
#
# pushover - script to send notification to the  service PushOver
# 
# https://pushover.net/
#
# Variables

Version="0.0.4"

USAGE="usage: `basename $0` [parameters] text"

# Functions
showUsage ()
{
cat <<EOUsageText
$USAGE

Use option -h for getting help.

EOUsageText
}

showHelp ()
{
cat <<EOHelpText
`basename $0` [-t <title>] <text>

Script for sending notification with Pushover (https://pushover.net)

$USAGE

-t set title for the notification
-p set priority
-h print this text and exit.

EOHelpText
}
# EndFunctions

#
# Read the config
#
# FixMe: Lazy and unsafe solution using sourcing

. ~/.pushover.conf



# Parse command line options.
while getopts hvt:p: OPT; do
    case "$OPT" in
        h)
            showHelp
            exit 0
            ;;
        v)
            echo "`basename $0` version $Version"
            exit 0
            ;;
        t)
            MSGTitle=$OPTARG
            ;;
        p)
            PrioOption=$OPTARG
            case "$PrioOption" in           #FixMe Move case to function ParsePriority
                lowest|stealth|-2)
                    MSGPriority="-2"
                    ;;
                low|silent|-1)
                    MSGPriority="-1"
                    ;;
                normal|0)
                    MSGPriority="0"
                    ;;
                high|1|+1)
                    MSGPriority="1"
                    ;;
                emergency|2|+2)
                    MSGPriority="2"
                    ;;
                *)
                    # invalid priority -> error
                    echo "Error: Invalid value \"$PrioOption\" for priority."   #FixMe Jump to help
                    exit 1
                    ;;
            esac
            ;;
        \?)
            # getopts issues an error message
            showUsage >&2
            exit 1
            ;;
    esac
done

# Remove the options we parsed above.
shift `expr $OPTIND - 1`

# We want at least one non-option argument.
# Remove this block if you don't need it.
if [ $# -eq 0 ]; then
    echo $USAGE >&2
    exit 1
fi

# The additional arguments are the message text
MSG=$*

# Genrating string with commend-sequence
CurlCall="curl -s   -d 'token=$APIKey'  -d 'user=$UserKey' -d 'message=$MSG'  "

# Here some more option, when set (e.g. title, priority)
# embeded in conditional-constructs
#
# Is title set, add  -t
if [ ! -z "$MSGTitle"  ]; then
    CurlCall="$CurlCall -d 'title=$MSGTitle' "
fi

# Is priority set
case $MSGPriority in
    -2|-1|1)
        CurlCall="$CurlCall -d 'priority=$MSGPriority' "
        ;;
    2)
        CurlCall="$CurlCall -d 'priority=$MSGPriority' -d 'retry=$EmergencyRetry' -d 'expire=$EmergencyExpire' "
        ;;
esac

# Add API-endpoint to the paraneter
CurlCall="$CurlCall https://api.pushover.net/1/messages.json"



# Call Pushover.net
CurlResult=$(eval $CurlCall)
echo $CurlResult
