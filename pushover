#! /bin/sh
#
# pushover - script to send notification to the  service PushOver
# 
# https://pushover.net/
#
# Variables

Version="0.0.6"

USAGE="usage: `basename $0` [parameters] text"

# Functions
showUsage ()
{
cat <<EOUsageText
$USAGE

Use option -h for getting help.

EOUsageText
}

showHelp ()
{
cat <<EOHelpText
`basename $0` [-t <title>] <text>

Script for sending notification with Pushover (https://pushover.net)

$USAGE

-t set title for the notification
-p set priority
-h print this text and exit.

EOHelpText
}

urlencode () {                                                                                                                                               
#
# This implematation of urlencoding is taken from
# https://stackoverflow.com/a/3077738/747635
#
 [ $# -lt 1 ] &&  { return; }

 encodedurl="$*";

# make sure hexdump exists, if not, just return
 [ ! -x "/usr/bin/hexdump" ] && { return; }

echo $(echo $encodedurl | hexdump -v -e '1/1 "%02x\t"' -e '1/1 "%_c\n"' |
    LANG=C awk '
        $1 == "20"                    { printf("%s",   "%20"); next } # space   becomes %20       # changed from original
        $1 ~  /0[adAD]$/              {                        next } # strip newlines 
        $2 ~  /^[a-zA-Z0-9.*()\/-]$/  { printf("%s",   $2);  next }   # pass through what we can
                                   { printf("%%%s", $1)        }   # take hex value of everything else
   ')
}

##########
#
# Cause 'urlencode' return no value, if 'hexdump' is not available
# here is a check for 'hexdump':
if  [ ! -x "/usr/bin/hexdump" ]; then
    echo "Error:  The tool 'hexdump' is not available."
    exit 99
fi

# EndFunctions

#
# Read the config
#
# FixMe: Lazy and unsafe solution using sourcing

. ~/.pushover.conf



# Parse command line options.
while getopts hvt:p: OPT; do
    case "$OPT" in
        h)
            showHelp
            exit 0
            ;;
        v)
            echo "`basename $0` version $Version"
            exit 0
            ;;
        t)
            MSGTitle=$OPTARG
            ;;
        p)
            PrioOption=$OPTARG
            case "$PrioOption" in           #FixMe Move case to function ParsePriority
                lowest|stealth|-2)
                    MSGPriority="-2"
                    ;;
                low|silent|-1)
                    MSGPriority="-1"
                    ;;
                normal|0)
                    MSGPriority="0"
                    ;;
                high|1|+1)
                    MSGPriority="1"
                    ;;
                emergency|2|+2)
                    MSGPriority="2"
                    ;;
                *)
                    # invalid priority -> error
                    echo "Error: Invalid value \"$PrioOption\" for priority."   #FixMe Jump to help
                    exit 1
                    ;;
            esac
            ;;
        \?)
            # getopts issues an error message
            showUsage >&2
            exit 1
            ;;
    esac
done

# Remove the options we parsed above.
shift `expr $OPTIND - 1`

# We want at least one non-option argument.
# Remove this block if you don't need it.
if [ $# -eq 0 ]; then
    echo $USAGE >&2
    exit 1
fi

# The additional arguments are the message text
MSG=$(urlencode $*)

# Genrating string with commend-sequence
CurlCall="curl -s   -d token=$APIKey&user=$UserKey&message="$MSG""

# Here some more option, when set (e.g. title, priority)
# embeded in conditional-constructs
#
# Is title set, add  -t
if [ ! -z "$MSGTitle"  ]; then
    CurlCall="$CurlCall&title=$(urlencode $MSGTitle)"
fi

# Is priority set
case $MSGPriority in
    -2|-1|1)
        CurlCall="$CurlCall&priority=$MSGPriority"
        ;;
    2)
        CurlCall="$CurlCall&priority=$MSGPriority&retry=$EmergencyRetry&expire=$EmergencyExpire"
        ;;
esac

# Add API-endpoint to the paraneter
CurlCall="$CurlCall https://api.pushover.net/1/messages.json"

# Call Pushover.net
PushoverResponse=$($CurlCall)
CurlReturnCode=$?

# Checking, if an error accured
#
# Phase 1: curl coneecting Pushover
#
# curl has thrown an error (exit code !=0 )
# codes: https://ec.haxx.se/usingcurl-returns.html
#
if [ !  $CurlReturnCode = "0"  ]; then
    echo "Error while connecting to Pushover.net (curl exit code $CurlReturnCode)."
    exit 2
fi

# Phase 2: Examine resppnse from Pushover.net
#
# If the first attribute is 'status', then call was successful
#
# Exception:
# If the priority is 'emergency' and the the call is successful,
# then the first attribute is 'receipt'
# We can use this information to get the  parameter for a call back function
#
# Parse the response
#
# cut the response at the first end second quotation mark to get th first
First=$(echo $PushoverResponse | cut -d'"' -f2)
case $First in
    status)
        # Success
        ;;
    receipt)
        # Also success, cause a receipt is only sended for an successful call
        # Parse and store the receipt ID for later use
        PushoverReceiptID=$(echo $PushoverResponse | cut -d'"' -f4)
        ;;
    *)
        # Everything else is an error (or I don't know it now...)
        # Error message is surounded by '[...]'
        # (if there is no error message, complete response will be echoed.)
        PushoverError=$(echo $PushoverResponse | cut -d[ -f2 | cut -d] -f1)
        echo "Error Message from Pushover.net: $PushoverError"
        exit 3
        ;;
esac
